@startuml
'https://plantuml.com/class-diagram

abstract class Edible{
hasBeenFertilized;
}
abstract class Animal {
eat (Edible obj)
makeNoise;
}
abstract class FarmVehicle {
operate;
makeNoise;
}
abstract class Aircraft {
fly;
makeNoise;
}
abstract class Farm {
}



interface Eater {
eat(Edible obj);
}
interface NoiseMaker {
makeNoise;
}
interface Rideable {}
interface Produce {
yield(Edible obj) if hasBeenFertilized;
}
interface Vehicle {
makeNoise;
}
interface Person {
eat(Edible obj);
makeNoise;
}
interface Rider {
mount(Rideable obj)
dismount(Rideable obj)
eat(Edible obj);
makeNoise;
}
interface Botanist {
plant (Crop crop, CropRow row);
eat(Edible obj);
makeNoise;
}
interface DailyRoutine {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
}



class Horse {
makeNoise
eat (Edible obj)
}
class Chicken {
eat (Edible obj)
makeNoise;
yield(EdibleEgg egg) if hasBeenFertilized == false
}
class EdibleEgg {
hasBeenFertilized;
}
class Field<CropRow> {
store(CropRow);
}
class CropRow<Crop> {
store(Crop);
}
class Crop {
yield (Edible obj) if hasBeenFertilized && hasBeenHarvested;
}
class CornStalk {
yield(EarCorn);
}
class EarCorn {
hasBeenFertilized;
hasBeenHarvested;
}
class TomatoPlant {
yield(Tomato);
}
class Tomato {
hasBeenFertilized;
hasBeenHarvested;
}
class BeanStalk {
yield(Soybean soybean)
}
class SoyBean {
hasBeenFertilized;
hasBeenHarvested;
}
class PumpkinVines {
yield(Pumpkin pumpkin)
}
class Pumpkin {
hasBeenFertilized;
hasBeenHarvested;
}
class AppleTrees {
yield (Apple apple)
}
class Apple {
hasBeenFertilized;
hasBeenHarvested;
}
class Tractor {
harvest(Crop crop);
operate;
makeNoise;
}
class CropDuster {
fertilize(CropRow row);
fly;
makeNoise;
}
class Farmer {
mount(Rideable obj)
dismount(Rideable obj)
eat(Edible obj);
makeNoise;
plant (Crop crop, CropRow row);
}
class Pilot {
mount(Rideable obj)
dismount(Rideable obj)
eat(Edible obj);
makeNoise;
Fly (CropDuster duster);
}
class Stable<Horse> {
store (Horse horse);
}
class FarmHouse<Person> {
store (Person person)
}
class ChickenCoop<Chicken> {
store (Chicken)
}
class Moonshine {
distill (Corn corn)
}
class ProduceStand {
addProduce (Produce)
}

class Monday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
fly (CropDuster duster)
}
class Tuesday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
mount(Tractor tractor)
harvest (Crop crop)
dismount(Tractor tractor)
}
class Wednesday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
distill (Moonshine moonshine)
}
class Thursday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
}
class Friday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
drink (Moonshine moonshine)
work (ProduceStand produceStand)
}
class Saturday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
feed (Chicken chicken)
}
class Sunday {
mount (Horse horse)
dismount (Horse horse)
feed (Horse horse, int numOfCorn)
eat(Edible obj)
plant (Crop crop, CropRow row) 3-5
}



Eater <|-- Animal
NoiseMaker <|-- Animal

Animal <|-- Horse
Rideable <|-- Horse

Animal <|-- Chicken
Produce <|-- Chicken

Person <|-- Rider
Person <|-- Botanist

Field <|-- CropRow

NoiseMaker <|--- Vehicle
Rideable <|--- Vehicle

Vehicle <|--- Aircraft
Vehicle <|--- FarmVehicle

Produce <|--- Crop

Crop <|--- CornStalk
Crop <|--- TomatoPlant
Crop <|--- BeanStalk
Crop <|--- PumpkinVines
Crop <|--- AppleTrees

Edible <|-- EarCorn
Edible <|-- Tomato
Edible <|--- EdibleEgg
Edible <|--- SoyBean
Edible <|--- Pumpkin
Edible <|--- Apple

NoiseMaker <|---- Person
Eater <|---- Person

FarmVehicle <|-- Tractor
Aircraft <|-- CropDuster

Botanist <|---- Farmer
Rider <|---- Farmer

Farm <|-- FarmHouse
Farm <|-- ChickenCoop
Farm <|-- Stable

Rider <|--- Pilot

DailyRoutine <|--- Monday
DailyRoutine <|--- Tuesday
DailyRoutine <|--- Wednesday
DailyRoutine <|--- Thursday
DailyRoutine <|--- Friday
DailyRoutine <|--- Saturday
DailyRoutine <|--- Sunday

@enduml